{"ast":null,"code":"'use strict';import _extends from\"@babel/runtime/helpers/extends\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import React,{PureComponent}from'react';import PropTypes from'prop-types';import FlatList from\"react-native-web/dist/exports/FlatList\";import SectionList from\"react-native-web/dist/exports/SectionList\";import Platform from\"react-native-web/dist/exports/Platform\";import ViewPropTypes from\"react-native-web/dist/exports/ViewPropTypes\";import SwipeRow from\"./SwipeRow\";var SwipeListView=function(_PureComponent){_inherits(SwipeListView,_PureComponent);function SwipeListView(props){var _this;_classCallCheck(this,SwipeListView);_this=_possibleConstructorReturn(this,_getPrototypeOf(SwipeListView).call(this,props));_this._renderItem=function(rowData){return _this.renderItem(rowData,_this._rows);};_this._onScroll=function(e){return _this.onScroll(e);};_this._onRef=function(c){return _this.setRefs(c);};_this._rows={};_this.openCellKey=null;_this.listViewProps={};if(Platform.OS==='ios'){_this.yScrollOffset=0;_this.layoutHeight=0;_this.listViewProps={onLayout:function onLayout(e){return _this.onLayout(e);},onContentSizeChange:function onContentSizeChange(w,h){return _this.onContentSizeChange(w,h);}};}return _this;}_createClass(SwipeListView,[{key:\"componentDidUpdate\",value:function componentDidUpdate(){if(this.props.refreshing){this.safeCloseOpenRow();}}},{key:\"setScrollEnabled\",value:function setScrollEnabled(enable){if(this.props.scrollEnabled===false){return;}if(this._listView&&this._listView.setNativeProps){this._listView.setNativeProps({scrollEnabled:enable});}else if(this._listView&&this._listView.getScrollResponder){var scrollResponder=this._listView.getScrollResponder();scrollResponder.setNativeProps&&scrollResponder.setNativeProps({scrollEnabled:enable});}this.props.onScrollEnabled&&this.props.onScrollEnabled(enable);}},{key:\"safeCloseOpenRow\",value:function safeCloseOpenRow(){var rowRef=this._rows[this.openCellKey];if(rowRef&&rowRef.closeRow){this._rows[this.openCellKey].closeRow();}}},{key:\"rowSwipeGestureBegan\",value:function rowSwipeGestureBegan(key){if(this.props.closeOnRowBeginSwipe&&this.openCellKey&&this.openCellKey!==key){this.safeCloseOpenRow();}if(this.props.swipeGestureBegan){this.props.swipeGestureBegan(key);}}},{key:\"onRowOpen\",value:function onRowOpen(key,toValue){if(this.openCellKey&&this.openCellKey!==key&&this.props.closeOnRowOpen&&!this.props.closeOnRowBeginSwipe){this.safeCloseOpenRow();}this.openCellKey=key;this.props.onRowOpen&&this.props.onRowOpen(key,this._rows,toValue);}},{key:\"onRowPress\",value:function onRowPress(){if(this.openCellKey){if(this.props.closeOnRowPress){this.safeCloseOpenRow();this.openCellKey=null;}}}},{key:\"onScroll\",value:function onScroll(e){if(Platform.OS==='ios'){this.yScrollOffset=e.nativeEvent.contentOffset.y;}if(this.openCellKey){if(this.props.closeOnScroll){this.safeCloseOpenRow();this.openCellKey=null;}}this.props.onScroll&&this.props.onScroll(e);}},{key:\"onLayout\",value:function onLayout(e){this.layoutHeight=e.nativeEvent.layout.height;this.props.onLayout&&this.props.onLayout(e);}},{key:\"onContentSizeChange\",value:function onContentSizeChange(w,h){var height=h-this.layoutHeight;if(this.yScrollOffset>=height&&height>0){if(this._listView instanceof FlatList){this._listView&&this._listView.scrollToEnd();}}this.props.onContentSizeChange&&this.props.onContentSizeChange(w,h);}},{key:\"setRefs\",value:function setRefs(ref){this._listView=ref;this.props.listViewRef&&this.props.listViewRef(ref);}},{key:\"renderCell\",value:function renderCell(VisibleComponent,HiddenComponent,key,item,shouldPreviewRow){var _this2=this;if(!HiddenComponent){return React.cloneElement(VisibleComponent,_objectSpread({},VisibleComponent.props,{ref:function ref(row){return _this2._rows[key]=row;},onRowOpen:function onRowOpen(toValue){return _this2.onRowOpen(key,toValue);},onRowDidOpen:function onRowDidOpen(toValue){return _this2.props.onRowDidOpen&&_this2.props.onRowDidOpen(key,_this2._rows,toValue);},onRowClose:function onRowClose(){return _this2.props.onRowClose&&_this2.props.onRowClose(key,_this2._rows);},onRowDidClose:function onRowDidClose(){return _this2.props.onRowDidClose&&_this2.props.onRowDidClose(key,_this2._rows);},onRowPress:function onRowPress(){return _this2.onRowPress();},setScrollEnabled:function setScrollEnabled(enable){return _this2.setScrollEnabled(enable);},swipeGestureBegan:function swipeGestureBegan(){return _this2.rowSwipeGestureBegan(key);}}));}else{return React.createElement(SwipeRow,{onSwipeValueChange:this.props.onSwipeValueChange?function(data){return _this2.props.onSwipeValueChange(_objectSpread({},data,{key:key}));}:null,ref:function ref(row){return _this2._rows[key]=row;},swipeGestureBegan:function swipeGestureBegan(){return _this2.rowSwipeGestureBegan(key);},onRowOpen:function onRowOpen(toValue){return _this2.onRowOpen(key,toValue);},onRowDidOpen:function onRowDidOpen(toValue){return _this2.props.onRowDidOpen&&_this2.props.onRowDidOpen(key,_this2._rows,toValue);},onRowClose:function onRowClose(){return _this2.props.onRowClose&&_this2.props.onRowClose(key,_this2._rows);},onRowDidClose:function onRowDidClose(){return _this2.props.onRowDidClose&&_this2.props.onRowDidClose(key,_this2._rows);},onRowPress:function onRowPress(){return _this2.onRowPress(key);},shouldItemUpdate:this.props.shouldItemUpdate?function(currentItem,newItem){return _this2.props.shouldItemUpdate(currentItem,newItem);}:null,setScrollEnabled:function setScrollEnabled(enable){return _this2.setScrollEnabled(enable);},leftOpenValue:item.leftOpenValue||this.props.leftOpenValue,rightOpenValue:item.rightOpenValue||this.props.rightOpenValue,closeOnRowPress:item.closeOnRowPress||this.props.closeOnRowPress,disableLeftSwipe:item.disableLeftSwipe||this.props.disableLeftSwipe,disableRightSwipe:item.disableRightSwipe||this.props.disableRightSwipe,stopLeftSwipe:item.stopLeftSwipe||this.props.stopLeftSwipe,stopRightSwipe:item.stopRightSwipe||this.props.stopRightSwipe,recalculateHiddenLayout:this.props.recalculateHiddenLayout,disableHiddenLayoutCalculation:this.props.disableHiddenLayoutCalculation,style:this.props.swipeRowStyle,preview:shouldPreviewRow,previewDuration:this.props.previewDuration,previewOpenDelay:this.props.previewOpenDelay,previewOpenValue:this.props.previewOpenValue,previewRepeat:this.props.previewRepeat,previewRepeatDelay:this.props.previewRepeatDelay,tension:this.props.tension,restSpeedThreshold:this.props.restSpeedThreshold,restDisplacementThreshold:this.props.restDisplacementThreshold,friction:this.props.friction,directionalDistanceChangeThreshold:this.props.directionalDistanceChangeThreshold,swipeToOpenPercent:this.props.swipeToOpenPercent,swipeToOpenVelocityContribution:this.props.swipeToOpenVelocityContribution,swipeToClosePercent:this.props.swipeToClosePercent,item:item,useNativeDriver:this.props.useNativeDriver},HiddenComponent,VisibleComponent);}}},{key:\"renderRow\",value:function renderRow(rowData,secId,rowId,rowMap){var key=\"\"+secId+rowId;var Component=this.props.renderRow(rowData,secId,rowId,rowMap);var HiddenComponent=this.props.renderHiddenRow&&this.props.renderHiddenRow(rowData,secId,rowId,rowMap);var previewRowId=this.props.dataSource&&this.props.dataSource.getRowIDForFlatIndex(this.props.previewRowIndex||0);var shouldPreviewRow=(this.props.previewFirstRow||this.props.previewRowIndex)&&rowId===previewRowId;return this.renderCell(Component,HiddenComponent,key,rowData,shouldPreviewRow);}},{key:\"renderItem\",value:function renderItem(rowData,rowMap){var Component=this.props.renderItem(rowData,rowMap);var HiddenComponent=this.props.renderHiddenItem&&this.props.renderHiddenItem(rowData,rowMap);var item=rowData.item,index=rowData.index;var key=item.key;if(!key&&this.props.keyExtractor){key=this.props.keyExtractor(item,index);}var shouldPreviewRow=typeof key!=='undefined'&&this.props.previewRowKey===key;return this.renderCell(Component,HiddenComponent,key,item,shouldPreviewRow);}},{key:\"render\",value:function render(){var _this$props=this.props,useSectionList=_this$props.useSectionList,renderListView=_this$props.renderListView,props=_objectWithoutProperties(_this$props,[\"useSectionList\",\"renderListView\"]);if(renderListView){var useRenderRow=!!this.props.renderRow;return renderListView(props,this.setRefs.bind(this),this.onScroll.bind(this),useRenderRow?this.renderRow.bind(this,this._rows):this.renderItem.bind(this));}if(useSectionList){return React.createElement(SectionList,_extends({},props,this.listViewProps,{ref:this._onRef,onScroll:this._onScroll,renderItem:this._renderItem}));}return React.createElement(FlatList,_extends({},props,this.listViewProps,{ref:this._onRef,onScroll:this._onScroll,renderItem:this._renderItem}));}}]);return SwipeListView;}(PureComponent);SwipeListView.propTypes={renderListView:PropTypes.func,renderItem:PropTypes.func,renderHiddenItem:PropTypes.func,leftOpenValue:PropTypes.number,rightOpenValue:PropTypes.number,stopLeftSwipe:PropTypes.number,stopRightSwipe:PropTypes.number,closeOnScroll:PropTypes.bool,closeOnRowPress:PropTypes.bool,closeOnRowBeginSwipe:PropTypes.bool,closeOnRowOpen:PropTypes.bool,disableLeftSwipe:PropTypes.bool,disableRightSwipe:PropTypes.bool,recalculateHiddenLayout:PropTypes.bool,disableHiddenLayoutCalculation:PropTypes.bool,swipeGestureBegan:PropTypes.func,onRowOpen:PropTypes.func,onRowDidOpen:PropTypes.func,onRowClose:PropTypes.func,onRowDidClose:PropTypes.func,onScrollEnabled:PropTypes.func,swipeRowStyle:ViewPropTypes.style,listViewRef:PropTypes.func,previewRowKey:PropTypes.string,previewFirstRow:PropTypes.bool,previewRowIndex:PropTypes.number,previewDuration:PropTypes.number,previewRepeat:PropTypes.bool,previewRepeatDelay:PropTypes.number,previewOpenDelay:PropTypes.number,previewOpenValue:PropTypes.number,friction:PropTypes.number,tension:PropTypes.number,restSpeedThreshold:PropTypes.number,restDisplacementThreshold:PropTypes.number,directionalDistanceChangeThreshold:PropTypes.number,swipeToOpenPercent:PropTypes.number,swipeToOpenVelocityContribution:PropTypes.number,swipeToClosePercent:PropTypes.number,shouldItemUpdate:PropTypes.func,onSwipeValueChange:PropTypes.func,useNativeDriver:PropTypes.bool};SwipeListView.defaultProps={leftOpenValue:0,rightOpenValue:0,closeOnRowBeginSwipe:false,closeOnScroll:true,closeOnRowPress:true,closeOnRowOpen:true,disableLeftSwipe:false,disableRightSwipe:false,recalculateHiddenLayout:false,disableHiddenLayoutCalculation:false,previewFirstRow:false,directionalDistanceChangeThreshold:2,swipeToOpenPercent:50,swipeToOpenVelocityContribution:0,swipeToClosePercent:50,useNativeDriver:true,previewRepeat:false,previewRepeatDelay:1000};export default SwipeListView;","map":{"version":3,"sources":["/Users/progupta/Documents/testapp/node_modules/react-native-swipe-list-view/components/SwipeListView.js"],"names":["React","PureComponent","PropTypes","SwipeRow","SwipeListView","props","_renderItem","rowData","renderItem","_rows","_onScroll","e","onScroll","_onRef","c","setRefs","openCellKey","listViewProps","Platform","OS","yScrollOffset","layoutHeight","onLayout","onContentSizeChange","w","h","refreshing","safeCloseOpenRow","enable","scrollEnabled","_listView","setNativeProps","getScrollResponder","scrollResponder","onScrollEnabled","rowRef","closeRow","key","closeOnRowBeginSwipe","swipeGestureBegan","toValue","closeOnRowOpen","onRowOpen","closeOnRowPress","nativeEvent","contentOffset","y","closeOnScroll","layout","height","FlatList","scrollToEnd","ref","listViewRef","VisibleComponent","HiddenComponent","item","shouldPreviewRow","cloneElement","row","onRowDidOpen","onRowClose","onRowDidClose","onRowPress","setScrollEnabled","rowSwipeGestureBegan","onSwipeValueChange","data","shouldItemUpdate","currentItem","newItem","leftOpenValue","rightOpenValue","disableLeftSwipe","disableRightSwipe","stopLeftSwipe","stopRightSwipe","recalculateHiddenLayout","disableHiddenLayoutCalculation","swipeRowStyle","previewDuration","previewOpenDelay","previewOpenValue","previewRepeat","previewRepeatDelay","tension","restSpeedThreshold","restDisplacementThreshold","friction","directionalDistanceChangeThreshold","swipeToOpenPercent","swipeToOpenVelocityContribution","swipeToClosePercent","useNativeDriver","secId","rowId","rowMap","Component","renderRow","renderHiddenRow","previewRowId","dataSource","getRowIDForFlatIndex","previewRowIndex","previewFirstRow","renderCell","renderHiddenItem","index","keyExtractor","previewRowKey","useSectionList","renderListView","useRenderRow","bind","propTypes","func","number","bool","ViewPropTypes","style","string","defaultProps"],"mappings":"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","sourcesContent":["'use strict';\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { FlatList, SectionList, Platform, ViewPropTypes } from 'react-native';\n\nimport SwipeRow from './SwipeRow';\n\n/**\n * ListView that renders SwipeRows.\n */\nclass SwipeListView extends PureComponent {\n    constructor(props) {\n        super(props);\n        this._rows = {};\n        this.openCellKey = null;\n        this.listViewProps = {};\n        if (Platform.OS === 'ios') {\n            // Keep track of scroll offset and layout changes on iOS to be able to handle\n            // https://github.com/jemise111/react-native-swipe-list-view/issues/109\n            this.yScrollOffset = 0;\n            this.layoutHeight = 0;\n            this.listViewProps = {\n                onLayout: e => this.onLayout(e),\n                onContentSizeChange: (w, h) => this.onContentSizeChange(w, h),\n            };\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.props.refreshing) {\n            this.safeCloseOpenRow();\n        }\n    }\n\n    setScrollEnabled(enable) {\n        if (this.props.scrollEnabled === false) {\n            return;\n        }\n        // Due to multiple issues reported across different versions of RN\n        // We do this in the safest way possible...\n        if (this._listView && this._listView.setNativeProps) {\n            this._listView.setNativeProps({ scrollEnabled: enable });\n        } else if (this._listView && this._listView.getScrollResponder) {\n            const scrollResponder = this._listView.getScrollResponder();\n            scrollResponder.setNativeProps &&\n                scrollResponder.setNativeProps({ scrollEnabled: enable });\n        }\n        this.props.onScrollEnabled && this.props.onScrollEnabled(enable);\n    }\n\n    safeCloseOpenRow() {\n        const rowRef = this._rows[this.openCellKey];\n        if (rowRef && rowRef.closeRow) {\n            this._rows[this.openCellKey].closeRow();\n        }\n    }\n\n    rowSwipeGestureBegan(key) {\n        if (\n            this.props.closeOnRowBeginSwipe &&\n            this.openCellKey &&\n            this.openCellKey !== key\n        ) {\n            this.safeCloseOpenRow();\n        }\n\n        if (this.props.swipeGestureBegan) {\n            this.props.swipeGestureBegan(key);\n        }\n    }\n\n    onRowOpen(key, toValue) {\n        if (\n            this.openCellKey &&\n            this.openCellKey !== key &&\n            this.props.closeOnRowOpen &&\n            !this.props.closeOnRowBeginSwipe\n        ) {\n            this.safeCloseOpenRow();\n        }\n        this.openCellKey = key;\n        this.props.onRowOpen && this.props.onRowOpen(key, this._rows, toValue);\n    }\n\n    onRowPress() {\n        if (this.openCellKey) {\n            if (this.props.closeOnRowPress) {\n                this.safeCloseOpenRow();\n                this.openCellKey = null;\n            }\n        }\n    }\n\n    onScroll(e) {\n        if (Platform.OS === 'ios') {\n            this.yScrollOffset = e.nativeEvent.contentOffset.y;\n        }\n        if (this.openCellKey) {\n            if (this.props.closeOnScroll) {\n                this.safeCloseOpenRow();\n                this.openCellKey = null;\n            }\n        }\n        this.props.onScroll && this.props.onScroll(e);\n    }\n\n    onLayout(e) {\n        this.layoutHeight = e.nativeEvent.layout.height;\n        this.props.onLayout && this.props.onLayout(e);\n    }\n\n    // When deleting rows on iOS, the list may end up being over-scrolled,\n    // which will prevent swiping any of the remaining rows. This triggers a scrollToEnd\n    // when that happens, which will make sure the list is kept in bounds.\n    // See: https://github.com/jemise111/react-native-swipe-list-view/issues/109\n    onContentSizeChange(w, h) {\n        const height = h - this.layoutHeight;\n        if (this.yScrollOffset >= height && height > 0) {\n            if (this._listView instanceof FlatList) {\n                this._listView && this._listView.scrollToEnd();\n            }\n        }\n        this.props.onContentSizeChange && this.props.onContentSizeChange(w, h);\n    }\n\n    setRefs(ref) {\n        this._listView = ref;\n        this.props.listViewRef && this.props.listViewRef(ref);\n    }\n\n    renderCell(VisibleComponent, HiddenComponent, key, item, shouldPreviewRow) {\n        if (!HiddenComponent) {\n            return React.cloneElement(VisibleComponent, {\n                ...VisibleComponent.props,\n                ref: row => (this._rows[key] = row),\n                onRowOpen: toValue => this.onRowOpen(key, toValue),\n                onRowDidOpen: toValue =>\n                    this.props.onRowDidOpen &&\n                    this.props.onRowDidOpen(key, this._rows, toValue),\n                onRowClose: () =>\n                    this.props.onRowClose &&\n                    this.props.onRowClose(key, this._rows),\n                onRowDidClose: () =>\n                    this.props.onRowDidClose &&\n                    this.props.onRowDidClose(key, this._rows),\n                onRowPress: () => this.onRowPress(),\n                setScrollEnabled: enable => this.setScrollEnabled(enable),\n                swipeGestureBegan: () => this.rowSwipeGestureBegan(key),\n            });\n        } else {\n            return (\n                <SwipeRow\n                    onSwipeValueChange={\n                        this.props.onSwipeValueChange\n                            ? data =>\n                                  this.props.onSwipeValueChange({\n                                      ...data,\n                                      key,\n                                  })\n                            : null\n                    }\n                    ref={row => (this._rows[key] = row)}\n                    swipeGestureBegan={() => this.rowSwipeGestureBegan(key)}\n                    onRowOpen={toValue => this.onRowOpen(key, toValue)}\n                    onRowDidOpen={toValue =>\n                        this.props.onRowDidOpen &&\n                        this.props.onRowDidOpen(key, this._rows, toValue)\n                    }\n                    onRowClose={() =>\n                        this.props.onRowClose &&\n                        this.props.onRowClose(key, this._rows)\n                    }\n                    onRowDidClose={() =>\n                        this.props.onRowDidClose &&\n                        this.props.onRowDidClose(key, this._rows)\n                    }\n                    onRowPress={() => this.onRowPress(key)}\n                    shouldItemUpdate={\n                        this.props.shouldItemUpdate\n                            ? (currentItem, newItem) =>\n                                  this.props.shouldItemUpdate(\n                                      currentItem,\n                                      newItem\n                                  )\n                            : null\n                    }\n                    setScrollEnabled={enable => this.setScrollEnabled(enable)}\n                    leftOpenValue={\n                        item.leftOpenValue || this.props.leftOpenValue\n                    }\n                    rightOpenValue={\n                        item.rightOpenValue || this.props.rightOpenValue\n                    }\n                    closeOnRowPress={\n                        item.closeOnRowPress || this.props.closeOnRowPress\n                    }\n                    disableLeftSwipe={\n                        item.disableLeftSwipe || this.props.disableLeftSwipe\n                    }\n                    disableRightSwipe={\n                        item.disableRightSwipe || this.props.disableRightSwipe\n                    }\n                    stopLeftSwipe={\n                        item.stopLeftSwipe || this.props.stopLeftSwipe\n                    }\n                    stopRightSwipe={\n                        item.stopRightSwipe || this.props.stopRightSwipe\n                    }\n                    recalculateHiddenLayout={this.props.recalculateHiddenLayout}\n                    disableHiddenLayoutCalculation={\n                        this.props.disableHiddenLayoutCalculation\n                    }\n                    style={this.props.swipeRowStyle}\n                    preview={shouldPreviewRow}\n                    previewDuration={this.props.previewDuration}\n                    previewOpenDelay={this.props.previewOpenDelay}\n                    previewOpenValue={this.props.previewOpenValue}\n                    previewRepeat={this.props.previewRepeat}\n                    previewRepeatDelay={this.props.previewRepeatDelay}\n                    tension={this.props.tension}\n                    restSpeedThreshold={this.props.restSpeedThreshold}\n                    restDisplacementThreshold={\n                        this.props.restDisplacementThreshold\n                    }\n                    friction={this.props.friction}\n                    directionalDistanceChangeThreshold={\n                        this.props.directionalDistanceChangeThreshold\n                    }\n                    swipeToOpenPercent={this.props.swipeToOpenPercent}\n                    swipeToOpenVelocityContribution={\n                        this.props.swipeToOpenVelocityContribution\n                    }\n                    swipeToClosePercent={this.props.swipeToClosePercent}\n                    item={item} // used for should item update comparisons\n                    useNativeDriver={this.props.useNativeDriver}\n                >\n                    {HiddenComponent}\n                    {VisibleComponent}\n                </SwipeRow>\n            );\n        }\n    }\n\n    // In most use cases this is no longer used. Only in the case we are passed renderListView={true}\n    // there may be legacy code that passes a this.props.renderRow func so we keep this for legacy purposes\n    renderRow(rowData, secId, rowId, rowMap) {\n        const key = `${secId}${rowId}`;\n        const Component = this.props.renderRow(rowData, secId, rowId, rowMap);\n        const HiddenComponent =\n            this.props.renderHiddenRow &&\n            this.props.renderHiddenRow(rowData, secId, rowId, rowMap);\n        const previewRowId =\n            this.props.dataSource &&\n            this.props.dataSource.getRowIDForFlatIndex(\n                this.props.previewRowIndex || 0\n            );\n        const shouldPreviewRow =\n            (this.props.previewFirstRow || this.props.previewRowIndex) &&\n            rowId === previewRowId;\n\n        return this.renderCell(\n            Component,\n            HiddenComponent,\n            key,\n            rowData,\n            shouldPreviewRow\n        );\n    }\n\n    renderItem(rowData, rowMap) {\n        const Component = this.props.renderItem(rowData, rowMap);\n        const HiddenComponent =\n            this.props.renderHiddenItem &&\n            this.props.renderHiddenItem(rowData, rowMap);\n        const { item, index } = rowData;\n        let { key } = item;\n        if (!key && this.props.keyExtractor) {\n            key = this.props.keyExtractor(item, index);\n        }\n\n        const shouldPreviewRow =\n            typeof key !== 'undefined' && this.props.previewRowKey === key;\n\n        return this.renderCell(\n            Component,\n            HiddenComponent,\n            key,\n            item,\n            shouldPreviewRow\n        );\n    }\n\n    _renderItem = rowData => this.renderItem(rowData, this._rows);\n\n    _onScroll = e => this.onScroll(e);\n\n    _onRef = c => this.setRefs(c);\n\n    render() {\n        const { useSectionList, renderListView, ...props } = this.props;\n\n        if (renderListView) {\n            // Ideally renderRow should be deprecated. We do this check for\n            // legacy purposes to not break certain renderListView cases\n            const useRenderRow = !!this.props.renderRow;\n            return renderListView(\n                props,\n                this.setRefs.bind(this),\n                this.onScroll.bind(this),\n                useRenderRow\n                    ? this.renderRow.bind(this, this._rows)\n                    : this.renderItem.bind(this)\n            );\n        }\n\n        if (useSectionList) {\n            return (\n                <SectionList\n                    {...props}\n                    {...this.listViewProps}\n                    ref={this._onRef}\n                    onScroll={this._onScroll}\n                    renderItem={this._renderItem}\n                />\n            );\n        }\n\n        return (\n            <FlatList\n                {...props}\n                {...this.listViewProps}\n                ref={this._onRef}\n                onScroll={this._onScroll}\n                renderItem={this._renderItem}\n            />\n        );\n    }\n}\n\nSwipeListView.propTypes = {\n    /**\n     * To render a custom ListView component, if you don't want to use ReactNative one.\n     * Note: This will call `renderRow`, not `renderItem`\n     */\n    renderListView: PropTypes.func,\n    /**\n     * How to render a row in a FlatList. Should return a valid React Element.\n     */\n    renderItem: PropTypes.func,\n    /**\n     * How to render a hidden row in a FlatList (renders behind the row). Should return a valid React Element.\n     * This is required unless renderItem is passing a SwipeRow.\n     */\n    renderHiddenItem: PropTypes.func,\n    /**\n     * TranslateX value for opening the row to the left (positive number)\n     */\n    leftOpenValue: PropTypes.number,\n    /**\n     * TranslateX value for opening the row to the right (negative number)\n     */\n    rightOpenValue: PropTypes.number,\n    /**\n     * TranslateX value for stop the row to the left (positive number)\n     */\n    stopLeftSwipe: PropTypes.number,\n    /**\n     * TranslateX value for stop the row to the right (negative number)\n     */\n    stopRightSwipe: PropTypes.number,\n    /**\n     * Should open rows be closed when the listView begins scrolling\n     */\n    closeOnScroll: PropTypes.bool,\n    /**\n     * Should open rows be closed when a row is pressed\n     */\n    closeOnRowPress: PropTypes.bool,\n    /**\n     * Should open rows be closed when a row begins to swipe open\n     */\n    closeOnRowBeginSwipe: PropTypes.bool,\n    /**\n     * Should open rows be closed when another row is opened\n     */\n    closeOnRowOpen: PropTypes.bool,\n    /**\n     * Disable ability to swipe rows left\n     */\n    disableLeftSwipe: PropTypes.bool,\n    /**\n     * Disable ability to swipe rows right\n     */\n    disableRightSwipe: PropTypes.bool,\n    /**\n     * Enable hidden row onLayout calculations to run always.\n     *\n     * By default, hidden row size calculations are only done on the first onLayout event\n     * for performance reasons.\n     * Passing ```true``` here will cause calculations to run on every onLayout event.\n     * You may want to do this if your rows' sizes can change.\n     * One case is a SwipeListView with rows of different heights and an options to delete rows.\n     */\n    recalculateHiddenLayout: PropTypes.bool,\n    /**\n     * Disable hidden row onLayout calculations\n     *\n     * Instead, {width: '100%', height: '100%'} will be used.\n     * Improves performance by avoiding component updates, while still working with orientation changes.\n     */\n    disableHiddenLayoutCalculation: PropTypes.bool,\n    /**\n     * Called when a swipe row is animating swipe\n     */\n    swipeGestureBegan: PropTypes.func,\n    /**\n     * Called when a swipe row is animating open\n     */\n    onRowOpen: PropTypes.func,\n    /**\n     * Called when a swipe row has animated open\n     */\n    onRowDidOpen: PropTypes.func,\n    /**\n     * Called when a swipe row is animating closed\n     */\n    onRowClose: PropTypes.func,\n    /**\n     * Called when a swipe row has animated closed\n     */\n    onRowDidClose: PropTypes.func,\n    /**\n     * Called when scrolling on the SwipeListView has been enabled/disabled\n     */\n    onScrollEnabled: PropTypes.func,\n    /**\n     * Styles for the parent wrapper View of the SwipeRow\n     */\n    swipeRowStyle: ViewPropTypes.style,\n    /**\n     * Called when the FlatList ref is set and passes a ref to the FlatList\n     * e.g. listViewRef={ ref => this._swipeListViewRef = ref }\n     */\n    listViewRef: PropTypes.func,\n    /**\n     * Should the row with this key do a slide out preview to show that the list is swipeable\n     */\n    previewRowKey: PropTypes.string,\n    /**\n     * [DEPRECATED] Should the first SwipeRow do a slide out preview to show that the list is swipeable\n     */\n    previewFirstRow: PropTypes.bool,\n    /**\n     * [DEPRECATED] Should the specified rowId do a slide out preview to show that the list is swipeable\n     * Note: This ID will be passed to this function to get the correct row index\n     * https://facebook.github.io/react-native/docs/listviewdatasource.html#getrowidforflatindex\n     */\n    previewRowIndex: PropTypes.number,\n    /**\n     * Duration of the slide out preview animation (milliseconds)\n     */\n    previewDuration: PropTypes.number,\n    /**\n     * Should the animation repeat until false is provided\n     */\n    previewRepeat: PropTypes.bool,\n    /**\n     * Time between each full completed animation in milliseconds\n     * Default: 1000 (1 second)\n     */\n    previewRepeatDelay: PropTypes.number,\n    /**\n     * Delay of the slide out preview animation (milliseconds) // default 700ms\n     */\n    previewOpenDelay: PropTypes.number,\n    /**\n     * TranslateX value for the slide out preview animation\n     * Default: 0.5 * props.rightOpenValue\n     */\n    previewOpenValue: PropTypes.number,\n    /**\n     * Friction for the open / close animation\n     */\n    friction: PropTypes.number,\n    /**\n     * Tension for the open / close animation\n     */\n    tension: PropTypes.number,\n    /**\n     * RestSpeedThreshold for the open / close animation\n     */\n    restSpeedThreshold: PropTypes.number,\n    /**\n     * RestDisplacementThreshold for the open / close animation\n     */\n    restDisplacementThreshold: PropTypes.number,\n    /**\n     * The dx value used to detect when a user has begun a swipe gesture\n     */\n    directionalDistanceChangeThreshold: PropTypes.number,\n    /**\n     * What % of the left/right openValue does the user need to swipe\n     * past to trigger the row opening.\n     */\n    swipeToOpenPercent: PropTypes.number,\n    /**\n     * Describes how much the ending velocity of the gesture affects whether the swipe will result in the item being closed or open.\n     * A velocity factor of 0 means that the velocity will have no bearing on whether the swipe settles on a closed or open position\n     * and it'll just take into consideration the swipeToOpenPercent.\n     */\n    swipeToOpenVelocityContribution: PropTypes.number,\n    /**\n     * What % of the left/right openValue does the user need to swipe\n     * past to trigger the row closing.\n     */\n    swipeToClosePercent: PropTypes.number,\n    /**\n     * callback to determine whether component should update (currentItem, newItem)\n     */\n    shouldItemUpdate: PropTypes.func,\n    /**\n     * Callback invoked any time the swipe value of a SwipeRow is changed\n     */\n    onSwipeValueChange: PropTypes.func,\n    /**\n     * useNativeDriver: true for all animations where possible\n     */\n    useNativeDriver: PropTypes.bool,\n};\n\nSwipeListView.defaultProps = {\n    leftOpenValue: 0,\n    rightOpenValue: 0,\n    closeOnRowBeginSwipe: false,\n    closeOnScroll: true,\n    closeOnRowPress: true,\n    closeOnRowOpen: true,\n    disableLeftSwipe: false,\n    disableRightSwipe: false,\n    recalculateHiddenLayout: false,\n    disableHiddenLayoutCalculation: false,\n    previewFirstRow: false,\n    directionalDistanceChangeThreshold: 2,\n    swipeToOpenPercent: 50,\n    swipeToOpenVelocityContribution: 0,\n    swipeToClosePercent: 50,\n    useNativeDriver: true,\n    previewRepeat: false,\n    previewRepeatDelay: 1000,\n};\n\nexport default SwipeListView;\n"]},"metadata":{},"sourceType":"module"}